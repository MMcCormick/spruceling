require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CartsController do

  before (:each) do
    @box = FactoryGirl.create(:box)
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  describe "GET show" do
    it "assigns the requested cart as @cart" do
      get :show
      assigns(:cart).should eq(@user.cart)
    end
  end

  describe "PUT add" do
    describe "with valid params" do
      it "updates the cart" do
        Cart.any_instance.should_receive(:add_box).with('foo')
        put :add, {:box_id => 'foo'}
      end

      it "redirects to the cart" do
        put :add, {:box_id => @box.id}
        response.should redirect_to(@user.cart)
      end
    end
  end

  describe "PUT remove" do
    describe "with valid params" do
      it "updates the cart" do
        Cart.any_instance.should_receive(:remove_box).with('foo')
        put :remove, {:box_id => 'foo'}
      end

      it "redirects to the cart" do
        put :remove, {:box_id => @box.id.to_s}
        response.should redirect_to(@user.cart)
      end
    end
  end

end
