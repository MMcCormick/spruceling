require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WithdrawalsController do

  before (:each) do
    @withdrawal = FactoryGirl.create(:withdrawal)
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  describe "GET new" do
    it "assigns the current user as @user" do
      get :new
      assigns(:user).should eq @user
    end
  end

  describe "POST create" do
    it "assigns the current user as @user" do
      get :new
      assigns(:user).should eq @user
    end

    describe "when the returned withdrawal is valid" do
      before(:each) do
        Withdrawal.should_receive(:generate).with(@user).and_return(@withdrawal)
        @withdrawal.should_receive(:valid?).and_return(true)
        @user.should_receive(:withdraw_from_account).and_return(true)
      end

      it "creates a new withdrawal" do
        expect {
          post :create
        }.to change(Withdrawal, :count).by(1)
      end

      it "assigns a newly created withdrawal as @withdrawal" do
        post :create
        assigns(:withdrawal).should be_a(Withdrawal)
        assigns(:withdrawal).should be_persisted
      end

      it "redirects to new withdrawal path" do
        post :create
        response.should redirect_to new_withdrawal_path
      end
    end

    describe "when the returned withdrawal is not valid" do
      before(:each) do
        Withdrawal.should_receive(:generate).with(@user).and_return(@withdrawal)
        @withdrawal.should_receive(:valid?).and_return(false)
        @user.should_receive(:withdraw_from_account).and_return(true)
      end

      it "assigns a newly created but unsaved withdrawal as @withdrawal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Withdrawal.any_instance.stub(:save).and_return(false)
        post :create, {:withdrawal => {}}
        assigns(:withdrawal).should be_a_new(Withdrawal)
      end
    end

    it "should require you to be signed in" do
      sign_out @user
      get :create
      response.should redirect_to(new_user_session_path)
    end
  end
end
